/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 276.0, "minX": 0.0, "maxY": 25450.0, "series": [{"data": [[0.0, 276.0], [0.1, 282.0], [0.2, 284.0], [0.3, 285.0], [0.4, 287.0], [0.5, 287.0], [0.6, 288.0], [0.7, 290.0], [0.8, 291.0], [0.9, 291.0], [1.0, 292.0], [1.1, 293.0], [1.2, 294.0], [1.3, 294.0], [1.4, 295.0], [1.5, 295.0], [1.6, 295.0], [1.7, 296.0], [1.8, 297.0], [1.9, 298.0], [2.0, 299.0], [2.1, 299.0], [2.2, 299.0], [2.3, 300.0], [2.4, 300.0], [2.5, 301.0], [2.6, 301.0], [2.7, 302.0], [2.8, 303.0], [2.9, 303.0], [3.0, 303.0], [3.1, 304.0], [3.2, 305.0], [3.3, 305.0], [3.4, 305.0], [3.5, 306.0], [3.6, 307.0], [3.7, 307.0], [3.8, 308.0], [3.9, 308.0], [4.0, 309.0], [4.1, 309.0], [4.2, 310.0], [4.3, 310.0], [4.4, 311.0], [4.5, 311.0], [4.6, 312.0], [4.7, 312.0], [4.8, 313.0], [4.9, 313.0], [5.0, 314.0], [5.1, 314.0], [5.2, 315.0], [5.3, 316.0], [5.4, 317.0], [5.5, 318.0], [5.6, 318.0], [5.7, 319.0], [5.8, 320.0], [5.9, 320.0], [6.0, 322.0], [6.1, 322.0], [6.2, 323.0], [6.3, 324.0], [6.4, 324.0], [6.5, 325.0], [6.6, 325.0], [6.7, 326.0], [6.8, 327.0], [6.9, 327.0], [7.0, 328.0], [7.1, 328.0], [7.2, 329.0], [7.3, 329.0], [7.4, 330.0], [7.5, 331.0], [7.6, 332.0], [7.7, 332.0], [7.8, 333.0], [7.9, 334.0], [8.0, 335.0], [8.1, 336.0], [8.2, 337.0], [8.3, 338.0], [8.4, 339.0], [8.5, 340.0], [8.6, 340.0], [8.7, 340.0], [8.8, 342.0], [8.9, 342.0], [9.0, 343.0], [9.1, 344.0], [9.2, 344.0], [9.3, 345.0], [9.4, 346.0], [9.5, 347.0], [9.6, 347.0], [9.7, 348.0], [9.8, 349.0], [9.9, 351.0], [10.0, 352.0], [10.1, 352.0], [10.2, 352.0], [10.3, 354.0], [10.4, 355.0], [10.5, 355.0], [10.6, 356.0], [10.7, 358.0], [10.8, 359.0], [10.9, 360.0], [11.0, 361.0], [11.1, 362.0], [11.2, 363.0], [11.3, 364.0], [11.4, 364.0], [11.5, 365.0], [11.6, 366.0], [11.7, 367.0], [11.8, 369.0], [11.9, 369.0], [12.0, 371.0], [12.1, 373.0], [12.2, 373.0], [12.3, 375.0], [12.4, 376.0], [12.5, 378.0], [12.6, 379.0], [12.7, 380.0], [12.8, 381.0], [12.9, 382.0], [13.0, 384.0], [13.1, 385.0], [13.2, 386.0], [13.3, 387.0], [13.4, 388.0], [13.5, 389.0], [13.6, 390.0], [13.7, 391.0], [13.8, 392.0], [13.9, 393.0], [14.0, 394.0], [14.1, 396.0], [14.2, 397.0], [14.3, 399.0], [14.4, 401.0], [14.5, 402.0], [14.6, 404.0], [14.7, 406.0], [14.8, 408.0], [14.9, 409.0], [15.0, 412.0], [15.1, 416.0], [15.2, 417.0], [15.3, 420.0], [15.4, 422.0], [15.5, 425.0], [15.6, 426.0], [15.7, 427.0], [15.8, 428.0], [15.9, 430.0], [16.0, 431.0], [16.1, 435.0], [16.2, 437.0], [16.3, 438.0], [16.4, 441.0], [16.5, 443.0], [16.6, 445.0], [16.7, 446.0], [16.8, 448.0], [16.9, 451.0], [17.0, 455.0], [17.1, 458.0], [17.2, 460.0], [17.3, 462.0], [17.4, 464.0], [17.5, 465.0], [17.6, 467.0], [17.7, 468.0], [17.8, 470.0], [17.9, 472.0], [18.0, 473.0], [18.1, 475.0], [18.2, 477.0], [18.3, 478.0], [18.4, 480.0], [18.5, 483.0], [18.6, 485.0], [18.7, 487.0], [18.8, 489.0], [18.9, 490.0], [19.0, 491.0], [19.1, 494.0], [19.2, 496.0], [19.3, 499.0], [19.4, 501.0], [19.5, 503.0], [19.6, 504.0], [19.7, 507.0], [19.8, 510.0], [19.9, 511.0], [20.0, 512.0], [20.1, 514.0], [20.2, 516.0], [20.3, 518.0], [20.4, 520.0], [20.5, 524.0], [20.6, 526.0], [20.7, 528.0], [20.8, 531.0], [20.9, 532.0], [21.0, 533.0], [21.1, 535.0], [21.2, 536.0], [21.3, 537.0], [21.4, 538.0], [21.5, 541.0], [21.6, 543.0], [21.7, 546.0], [21.8, 548.0], [21.9, 550.0], [22.0, 553.0], [22.1, 555.0], [22.2, 557.0], [22.3, 559.0], [22.4, 561.0], [22.5, 561.0], [22.6, 564.0], [22.7, 566.0], [22.8, 568.0], [22.9, 570.0], [23.0, 571.0], [23.1, 573.0], [23.2, 575.0], [23.3, 576.0], [23.4, 577.0], [23.5, 580.0], [23.6, 582.0], [23.7, 584.0], [23.8, 585.0], [23.9, 586.0], [24.0, 588.0], [24.1, 590.0], [24.2, 592.0], [24.3, 594.0], [24.4, 594.0], [24.5, 595.0], [24.6, 597.0], [24.7, 598.0], [24.8, 599.0], [24.9, 601.0], [25.0, 602.0], [25.1, 604.0], [25.2, 606.0], [25.3, 608.0], [25.4, 610.0], [25.5, 612.0], [25.6, 614.0], [25.7, 615.0], [25.8, 616.0], [25.9, 617.0], [26.0, 618.0], [26.1, 619.0], [26.2, 620.0], [26.3, 624.0], [26.4, 624.0], [26.5, 625.0], [26.6, 627.0], [26.7, 628.0], [26.8, 629.0], [26.9, 630.0], [27.0, 631.0], [27.1, 632.0], [27.2, 633.0], [27.3, 634.0], [27.4, 635.0], [27.5, 636.0], [27.6, 638.0], [27.7, 639.0], [27.8, 641.0], [27.9, 642.0], [28.0, 643.0], [28.1, 644.0], [28.2, 645.0], [28.3, 646.0], [28.4, 647.0], [28.5, 648.0], [28.6, 649.0], [28.7, 649.0], [28.8, 651.0], [28.9, 652.0], [29.0, 652.0], [29.1, 654.0], [29.2, 654.0], [29.3, 656.0], [29.4, 657.0], [29.5, 658.0], [29.6, 659.0], [29.7, 662.0], [29.8, 663.0], [29.9, 664.0], [30.0, 665.0], [30.1, 665.0], [30.2, 666.0], [30.3, 666.0], [30.4, 668.0], [30.5, 669.0], [30.6, 670.0], [30.7, 671.0], [30.8, 671.0], [30.9, 673.0], [31.0, 674.0], [31.1, 676.0], [31.2, 677.0], [31.3, 678.0], [31.4, 679.0], [31.5, 680.0], [31.6, 682.0], [31.7, 683.0], [31.8, 684.0], [31.9, 685.0], [32.0, 686.0], [32.1, 687.0], [32.2, 688.0], [32.3, 689.0], [32.4, 689.0], [32.5, 691.0], [32.6, 693.0], [32.7, 694.0], [32.8, 694.0], [32.9, 695.0], [33.0, 696.0], [33.1, 697.0], [33.2, 697.0], [33.3, 698.0], [33.4, 699.0], [33.5, 700.0], [33.6, 700.0], [33.7, 701.0], [33.8, 702.0], [33.9, 703.0], [34.0, 704.0], [34.1, 706.0], [34.2, 707.0], [34.3, 708.0], [34.4, 710.0], [34.5, 711.0], [34.6, 712.0], [34.7, 713.0], [34.8, 713.0], [34.9, 714.0], [35.0, 716.0], [35.1, 717.0], [35.2, 717.0], [35.3, 719.0], [35.4, 719.0], [35.5, 720.0], [35.6, 721.0], [35.7, 722.0], [35.8, 723.0], [35.9, 723.0], [36.0, 724.0], [36.1, 725.0], [36.2, 726.0], [36.3, 727.0], [36.4, 728.0], [36.5, 729.0], [36.6, 731.0], [36.7, 732.0], [36.8, 733.0], [36.9, 734.0], [37.0, 736.0], [37.1, 737.0], [37.2, 738.0], [37.3, 739.0], [37.4, 740.0], [37.5, 742.0], [37.6, 743.0], [37.7, 743.0], [37.8, 744.0], [37.9, 745.0], [38.0, 745.0], [38.1, 746.0], [38.2, 747.0], [38.3, 748.0], [38.4, 748.0], [38.5, 750.0], [38.6, 751.0], [38.7, 751.0], [38.8, 752.0], [38.9, 752.0], [39.0, 753.0], [39.1, 754.0], [39.2, 756.0], [39.3, 757.0], [39.4, 757.0], [39.5, 758.0], [39.6, 759.0], [39.7, 760.0], [39.8, 760.0], [39.9, 761.0], [40.0, 762.0], [40.1, 763.0], [40.2, 764.0], [40.3, 764.0], [40.4, 765.0], [40.5, 766.0], [40.6, 767.0], [40.7, 768.0], [40.8, 769.0], [40.9, 770.0], [41.0, 770.0], [41.1, 771.0], [41.2, 771.0], [41.3, 772.0], [41.4, 772.0], [41.5, 773.0], [41.6, 774.0], [41.7, 775.0], [41.8, 776.0], [41.9, 776.0], [42.0, 777.0], [42.1, 778.0], [42.2, 779.0], [42.3, 780.0], [42.4, 781.0], [42.5, 782.0], [42.6, 783.0], [42.7, 784.0], [42.8, 785.0], [42.9, 786.0], [43.0, 787.0], [43.1, 787.0], [43.2, 788.0], [43.3, 788.0], [43.4, 789.0], [43.5, 790.0], [43.6, 790.0], [43.7, 791.0], [43.8, 792.0], [43.9, 793.0], [44.0, 794.0], [44.1, 795.0], [44.2, 796.0], [44.3, 797.0], [44.4, 798.0], [44.5, 799.0], [44.6, 800.0], [44.7, 801.0], [44.8, 803.0], [44.9, 804.0], [45.0, 804.0], [45.1, 805.0], [45.2, 806.0], [45.3, 806.0], [45.4, 808.0], [45.5, 809.0], [45.6, 810.0], [45.7, 811.0], [45.8, 812.0], [45.9, 813.0], [46.0, 815.0], [46.1, 816.0], [46.2, 818.0], [46.3, 819.0], [46.4, 820.0], [46.5, 821.0], [46.6, 822.0], [46.7, 823.0], [46.8, 824.0], [46.9, 825.0], [47.0, 827.0], [47.1, 828.0], [47.2, 830.0], [47.3, 831.0], [47.4, 832.0], [47.5, 833.0], [47.6, 834.0], [47.7, 834.0], [47.8, 835.0], [47.9, 837.0], [48.0, 838.0], [48.1, 839.0], [48.2, 840.0], [48.3, 842.0], [48.4, 843.0], [48.5, 844.0], [48.6, 844.0], [48.7, 846.0], [48.8, 846.0], [48.9, 847.0], [49.0, 849.0], [49.1, 850.0], [49.2, 851.0], [49.3, 853.0], [49.4, 854.0], [49.5, 856.0], [49.6, 857.0], [49.7, 858.0], [49.8, 859.0], [49.9, 860.0], [50.0, 861.0], [50.1, 861.0], [50.2, 863.0], [50.3, 864.0], [50.4, 865.0], [50.5, 866.0], [50.6, 867.0], [50.7, 868.0], [50.8, 869.0], [50.9, 870.0], [51.0, 871.0], [51.1, 873.0], [51.2, 874.0], [51.3, 875.0], [51.4, 876.0], [51.5, 877.0], [51.6, 879.0], [51.7, 881.0], [51.8, 882.0], [51.9, 884.0], [52.0, 885.0], [52.1, 887.0], [52.2, 888.0], [52.3, 890.0], [52.4, 891.0], [52.5, 893.0], [52.6, 894.0], [52.7, 895.0], [52.8, 896.0], [52.9, 897.0], [53.0, 898.0], [53.1, 899.0], [53.2, 901.0], [53.3, 903.0], [53.4, 904.0], [53.5, 906.0], [53.6, 907.0], [53.7, 908.0], [53.8, 908.0], [53.9, 910.0], [54.0, 911.0], [54.1, 912.0], [54.2, 913.0], [54.3, 914.0], [54.4, 915.0], [54.5, 916.0], [54.6, 917.0], [54.7, 918.0], [54.8, 920.0], [54.9, 922.0], [55.0, 923.0], [55.1, 924.0], [55.2, 926.0], [55.3, 927.0], [55.4, 928.0], [55.5, 929.0], [55.6, 930.0], [55.7, 931.0], [55.8, 934.0], [55.9, 934.0], [56.0, 936.0], [56.1, 937.0], [56.2, 938.0], [56.3, 939.0], [56.4, 942.0], [56.5, 943.0], [56.6, 944.0], [56.7, 945.0], [56.8, 947.0], [56.9, 949.0], [57.0, 950.0], [57.1, 951.0], [57.2, 952.0], [57.3, 953.0], [57.4, 954.0], [57.5, 955.0], [57.6, 956.0], [57.7, 956.0], [57.8, 957.0], [57.9, 958.0], [58.0, 960.0], [58.1, 962.0], [58.2, 963.0], [58.3, 964.0], [58.4, 966.0], [58.5, 967.0], [58.6, 970.0], [58.7, 971.0], [58.8, 973.0], [58.9, 974.0], [59.0, 976.0], [59.1, 978.0], [59.2, 979.0], [59.3, 980.0], [59.4, 981.0], [59.5, 983.0], [59.6, 985.0], [59.7, 986.0], [59.8, 987.0], [59.9, 989.0], [60.0, 991.0], [60.1, 992.0], [60.2, 993.0], [60.3, 995.0], [60.4, 995.0], [60.5, 997.0], [60.6, 998.0], [60.7, 1000.0], [60.8, 1001.0], [60.9, 1002.0], [61.0, 1003.0], [61.1, 1004.0], [61.2, 1005.0], [61.3, 1007.0], [61.4, 1008.0], [61.5, 1010.0], [61.6, 1011.0], [61.7, 1013.0], [61.8, 1014.0], [61.9, 1016.0], [62.0, 1017.0], [62.1, 1019.0], [62.2, 1020.0], [62.3, 1021.0], [62.4, 1022.0], [62.5, 1024.0], [62.6, 1025.0], [62.7, 1027.0], [62.8, 1030.0], [62.9, 1031.0], [63.0, 1032.0], [63.1, 1034.0], [63.2, 1036.0], [63.3, 1037.0], [63.4, 1040.0], [63.5, 1042.0], [63.6, 1045.0], [63.7, 1046.0], [63.8, 1047.0], [63.9, 1048.0], [64.0, 1050.0], [64.1, 1052.0], [64.2, 1053.0], [64.3, 1055.0], [64.4, 1058.0], [64.5, 1060.0], [64.6, 1061.0], [64.7, 1064.0], [64.8, 1065.0], [64.9, 1067.0], [65.0, 1069.0], [65.1, 1070.0], [65.2, 1073.0], [65.3, 1075.0], [65.4, 1076.0], [65.5, 1078.0], [65.6, 1080.0], [65.7, 1085.0], [65.8, 1086.0], [65.9, 1087.0], [66.0, 1090.0], [66.1, 1092.0], [66.2, 1095.0], [66.3, 1097.0], [66.4, 1100.0], [66.5, 1104.0], [66.6, 1105.0], [66.7, 1107.0], [66.8, 1108.0], [66.9, 1111.0], [67.0, 1112.0], [67.1, 1115.0], [67.2, 1117.0], [67.3, 1120.0], [67.4, 1121.0], [67.5, 1126.0], [67.6, 1128.0], [67.7, 1131.0], [67.8, 1131.0], [67.9, 1135.0], [68.0, 1137.0], [68.1, 1139.0], [68.2, 1140.0], [68.3, 1144.0], [68.4, 1146.0], [68.5, 1148.0], [68.6, 1149.0], [68.7, 1153.0], [68.8, 1154.0], [68.9, 1156.0], [69.0, 1158.0], [69.1, 1162.0], [69.2, 1165.0], [69.3, 1168.0], [69.4, 1169.0], [69.5, 1172.0], [69.6, 1174.0], [69.7, 1175.0], [69.8, 1177.0], [69.9, 1179.0], [70.0, 1181.0], [70.1, 1182.0], [70.2, 1185.0], [70.3, 1187.0], [70.4, 1191.0], [70.5, 1194.0], [70.6, 1197.0], [70.7, 1202.0], [70.8, 1205.0], [70.9, 1207.0], [71.0, 1209.0], [71.1, 1212.0], [71.2, 1214.0], [71.3, 1217.0], [71.4, 1219.0], [71.5, 1223.0], [71.6, 1225.0], [71.7, 1228.0], [71.8, 1230.0], [71.9, 1237.0], [72.0, 1240.0], [72.1, 1241.0], [72.2, 1246.0], [72.3, 1249.0], [72.4, 1252.0], [72.5, 1256.0], [72.6, 1259.0], [72.7, 1264.0], [72.8, 1266.0], [72.9, 1270.0], [73.0, 1273.0], [73.1, 1276.0], [73.2, 1278.0], [73.3, 1282.0], [73.4, 1284.0], [73.5, 1285.0], [73.6, 1287.0], [73.7, 1290.0], [73.8, 1293.0], [73.9, 1298.0], [74.0, 1300.0], [74.1, 1302.0], [74.2, 1304.0], [74.3, 1307.0], [74.4, 1310.0], [74.5, 1312.0], [74.6, 1315.0], [74.7, 1320.0], [74.8, 1323.0], [74.9, 1324.0], [75.0, 1330.0], [75.1, 1334.0], [75.2, 1336.0], [75.3, 1346.0], [75.4, 1349.0], [75.5, 1354.0], [75.6, 1356.0], [75.7, 1361.0], [75.8, 1362.0], [75.9, 1369.0], [76.0, 1371.0], [76.1, 1375.0], [76.2, 1377.0], [76.3, 1379.0], [76.4, 1380.0], [76.5, 1383.0], [76.6, 1389.0], [76.7, 1399.0], [76.8, 1403.0], [76.9, 1407.0], [77.0, 1409.0], [77.1, 1414.0], [77.2, 1418.0], [77.3, 1422.0], [77.4, 1425.0], [77.5, 1433.0], [77.6, 1437.0], [77.7, 1443.0], [77.8, 1449.0], [77.9, 1456.0], [78.0, 1458.0], [78.1, 1463.0], [78.2, 1473.0], [78.3, 1481.0], [78.4, 1486.0], [78.5, 1490.0], [78.6, 1500.0], [78.7, 1503.0], [78.8, 1507.0], [78.9, 1512.0], [79.0, 1519.0], [79.1, 1525.0], [79.2, 1529.0], [79.3, 1534.0], [79.4, 1542.0], [79.5, 1555.0], [79.6, 1563.0], [79.7, 1569.0], [79.8, 1574.0], [79.9, 1578.0], [80.0, 1586.0], [80.1, 1591.0], [80.2, 1595.0], [80.3, 1608.0], [80.4, 1611.0], [80.5, 1616.0], [80.6, 1631.0], [80.7, 1637.0], [80.8, 1646.0], [80.9, 1653.0], [81.0, 1658.0], [81.1, 1666.0], [81.2, 1676.0], [81.3, 1681.0], [81.4, 1686.0], [81.5, 1692.0], [81.6, 1703.0], [81.7, 1706.0], [81.8, 1715.0], [81.9, 1718.0], [82.0, 1727.0], [82.1, 1737.0], [82.2, 1745.0], [82.3, 1756.0], [82.4, 1764.0], [82.5, 1768.0], [82.6, 1781.0], [82.7, 1796.0], [82.8, 1805.0], [82.9, 1811.0], [83.0, 1816.0], [83.1, 1822.0], [83.2, 1826.0], [83.3, 1834.0], [83.4, 1844.0], [83.5, 1856.0], [83.6, 1860.0], [83.7, 1874.0], [83.8, 1890.0], [83.9, 1893.0], [84.0, 1901.0], [84.1, 1913.0], [84.2, 1917.0], [84.3, 1925.0], [84.4, 1935.0], [84.5, 1941.0], [84.6, 1948.0], [84.7, 1954.0], [84.8, 1958.0], [84.9, 1966.0], [85.0, 1976.0], [85.1, 1981.0], [85.2, 1994.0], [85.3, 2008.0], [85.4, 2017.0], [85.5, 2028.0], [85.6, 2033.0], [85.7, 2044.0], [85.8, 2056.0], [85.9, 2064.0], [86.0, 2078.0], [86.1, 2095.0], [86.2, 2105.0], [86.3, 2121.0], [86.4, 2127.0], [86.5, 2138.0], [86.6, 2148.0], [86.7, 2165.0], [86.8, 2173.0], [86.9, 2184.0], [87.0, 2193.0], [87.1, 2200.0], [87.2, 2205.0], [87.3, 2213.0], [87.4, 2219.0], [87.5, 2229.0], [87.6, 2236.0], [87.7, 2241.0], [87.8, 2249.0], [87.9, 2258.0], [88.0, 2265.0], [88.1, 2275.0], [88.2, 2284.0], [88.3, 2296.0], [88.4, 2304.0], [88.5, 2317.0], [88.6, 2329.0], [88.7, 2349.0], [88.8, 2371.0], [88.9, 2384.0], [89.0, 2400.0], [89.1, 2419.0], [89.2, 2451.0], [89.3, 2465.0], [89.4, 2486.0], [89.5, 2506.0], [89.6, 2527.0], [89.7, 2555.0], [89.8, 2582.0], [89.9, 2623.0], [90.0, 2647.0], [90.1, 2689.0], [90.2, 2721.0], [90.3, 2742.0], [90.4, 2777.0], [90.5, 2821.0], [90.6, 2894.0], [90.7, 2967.0], [90.8, 3017.0], [90.9, 3094.0], [91.0, 3109.0], [91.1, 3168.0], [91.2, 3213.0], [91.3, 3257.0], [91.4, 3337.0], [91.5, 3438.0], [91.6, 3610.0], [91.7, 3668.0], [91.8, 3815.0], [91.9, 3943.0], [92.0, 4045.0], [92.1, 4147.0], [92.2, 4264.0], [92.3, 4358.0], [92.4, 4454.0], [92.5, 4548.0], [92.6, 4666.0], [92.7, 4875.0], [92.8, 5010.0], [92.9, 5128.0], [93.0, 5291.0], [93.1, 5392.0], [93.2, 5645.0], [93.3, 5861.0], [93.4, 5988.0], [93.5, 6178.0], [93.6, 6352.0], [93.7, 6467.0], [93.8, 6630.0], [93.9, 6685.0], [94.0, 6851.0], [94.1, 6908.0], [94.2, 7028.0], [94.3, 7069.0], [94.4, 7154.0], [94.5, 7233.0], [94.6, 7361.0], [94.7, 7629.0], [94.8, 7801.0], [94.9, 8078.0], [95.0, 8258.0], [95.1, 8766.0], [95.2, 9036.0], [95.3, 9183.0], [95.4, 9486.0], [95.5, 10188.0], [95.6, 10539.0], [95.7, 10752.0], [95.8, 10809.0], [95.9, 10882.0], [96.0, 10913.0], [96.1, 10967.0], [96.2, 11005.0], [96.3, 11035.0], [96.4, 11051.0], [96.5, 11060.0], [96.6, 11089.0], [96.7, 11113.0], [96.8, 11138.0], [96.9, 11161.0], [97.0, 11181.0], [97.1, 11206.0], [97.2, 11221.0], [97.3, 11247.0], [97.4, 11276.0], [97.5, 11295.0], [97.6, 11319.0], [97.7, 11338.0], [97.8, 11357.0], [97.9, 11379.0], [98.0, 11394.0], [98.1, 11419.0], [98.2, 11440.0], [98.3, 11464.0], [98.4, 11490.0], [98.5, 11527.0], [98.6, 11572.0], [98.7, 11600.0], [98.8, 11657.0], [98.9, 11772.0], [99.0, 12039.0], [99.1, 12311.0], [99.2, 12711.0], [99.3, 13238.0], [99.4, 13724.0], [99.5, 14443.0], [99.6, 15214.0], [99.7, 19404.0], [99.8, 20029.0], [99.9, 23339.0]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 200.0, "maxY": 720.0, "series": [{"data": [[200.0, 133.0], [300.0, 720.0], [400.0, 297.0], [500.0, 327.0], [600.0, 516.0], [700.0, 660.0], [800.0, 510.0], [900.0, 451.0], [1000.0, 339.0], [1100.0, 255.0], [1200.0, 198.0], [1300.0, 163.0], [1400.0, 111.0], [1500.0, 96.0], [1600.0, 83.0], [1700.0, 67.0], [1800.0, 76.0], [1900.0, 74.0], [2000.0, 54.0], [2100.0, 56.0], [2200.0, 76.0], [2300.0, 37.0], [2400.0, 27.0], [2500.0, 24.0], [2600.0, 18.0], [2700.0, 18.0], [2800.0, 10.0], [2900.0, 10.0], [3000.0, 11.0], [3100.0, 12.0], [3200.0, 10.0], [3300.0, 7.0], [3400.0, 7.0], [3500.0, 1.0], [3600.0, 7.0], [3700.0, 4.0], [3800.0, 6.0], [3900.0, 5.0], [4000.0, 6.0], [4100.0, 5.0], [4200.0, 6.0], [4300.0, 8.0], [4400.0, 6.0], [4600.0, 5.0], [4500.0, 5.0], [4700.0, 2.0], [4800.0, 2.0], [5000.0, 6.0], [4900.0, 5.0], [5100.0, 3.0], [5200.0, 5.0], [5300.0, 5.0], [5400.0, 1.0], [5500.0, 4.0], [5600.0, 1.0], [5800.0, 3.0], [5700.0, 4.0], [5900.0, 4.0], [6000.0, 2.0], [6100.0, 5.0], [6200.0, 2.0], [6300.0, 6.0], [6600.0, 8.0], [6500.0, 3.0], [6400.0, 4.0], [6800.0, 8.0], [6900.0, 6.0], [6700.0, 3.0], [7000.0, 9.0], [7100.0, 9.0], [7200.0, 6.0], [7400.0, 3.0], [7300.0, 1.0], [7600.0, 4.0], [7500.0, 2.0], [7800.0, 4.0], [7700.0, 2.0], [7900.0, 1.0], [8000.0, 4.0], [8100.0, 2.0], [8300.0, 2.0], [8700.0, 4.0], [8200.0, 2.0], [8400.0, 1.0], [9000.0, 4.0], [8800.0, 1.0], [8900.0, 2.0], [9100.0, 4.0], [9200.0, 2.0], [9600.0, 1.0], [9400.0, 4.0], [9500.0, 1.0], [9800.0, 2.0], [9900.0, 1.0], [10200.0, 1.0], [10100.0, 1.0], [10400.0, 2.0], [10700.0, 6.0], [10300.0, 1.0], [10500.0, 2.0], [10600.0, 3.0], [11100.0, 25.0], [11000.0, 27.0], [11200.0, 28.0], [10900.0, 15.0], [10800.0, 10.0], [11500.0, 16.0], [11600.0, 8.0], [11400.0, 24.0], [11300.0, 29.0], [11700.0, 6.0], [11900.0, 1.0], [11800.0, 3.0], [12000.0, 1.0], [12200.0, 3.0], [12100.0, 2.0], [12500.0, 2.0], [12400.0, 1.0], [12300.0, 2.0], [12700.0, 2.0], [13200.0, 2.0], [12900.0, 2.0], [13100.0, 1.0], [12800.0, 2.0], [13600.0, 1.0], [13800.0, 2.0], [13700.0, 2.0], [13500.0, 2.0], [13400.0, 1.0], [14300.0, 1.0], [13900.0, 1.0], [14500.0, 2.0], [14400.0, 2.0], [14700.0, 1.0], [14800.0, 1.0], [15300.0, 1.0], [15200.0, 1.0], [15400.0, 2.0], [16100.0, 1.0], [18400.0, 1.0], [19400.0, 1.0], [19800.0, 1.0], [20000.0, 1.0], [19500.0, 1.0], [19900.0, 1.0], [19600.0, 2.0], [21300.0, 1.0], [23200.0, 2.0], [23300.0, 1.0], [23000.0, 2.0], [23500.0, 1.0], [23700.0, 1.0], [23600.0, 1.0], [25400.0, 1.0], [24800.0, 1.0]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 25400.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 242.0, "minX": 0.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 3529.0, "series": [{"data": [[0.0, 1153.0]], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [[1.0, 3529.0]], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 1031.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [[3.0, 242.0]], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 3.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 3.9600000000000004, "minX": 1.60319334E12, "maxY": 171.4447306791567, "series": [{"data": [[1.6031934E12, 171.4447306791567], [1.60319346E12, 3.9600000000000004], [1.60319334E12, 45.2469879518072]], "isOverall": false, "label": "Spike Testing", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.60319346E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 3600000);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 411.125, "minX": 1.0, "maxY": 14869.0, "series": [{"data": [[2.0, 4848.333333333333], [3.0, 420.40000000000003], [4.0, 1703.1], [5.0, 2239.2000000000003], [6.0, 1685.9166666666667], [7.0, 1101.9090909090908], [8.0, 1945.7500000000002], [9.0, 1328.6666666666665], [10.0, 1698.8125], [11.0, 889.0], [12.0, 942.0], [13.0, 733.0], [14.0, 932.5833333333334], [15.0, 1519.0769230769229], [16.0, 581.84], [17.0, 1458.0], [18.0, 1060.8518518518517], [19.0, 1148.142857142857], [20.0, 718.7941176470588], [21.0, 599.84], [22.0, 1177.107142857143], [23.0, 981.5333333333333], [24.0, 811.1707317073171], [25.0, 730.0416666666667], [26.0, 503.92857142857144], [27.0, 1237.2666666666667], [28.0, 1336.2142857142858], [29.0, 1051.8947368421054], [30.0, 1042.4285714285713], [31.0, 561.5490196078432], [32.0, 727.4827586206895], [33.0, 625.9574468085106], [34.0, 567.5434782608696], [35.0, 654.391304347826], [36.0, 632.0930232558138], [37.0, 981.2083333333335], [38.0, 884.3157894736842], [39.0, 686.217391304348], [40.0, 662.0277777777779], [41.0, 711.8214285714286], [42.0, 497.888888888889], [43.0, 641.7708333333335], [44.0, 1153.5], [45.0, 1271.7142857142858], [46.0, 848.4594594594594], [47.0, 1773.0625], [48.0, 919.8823529411765], [49.0, 843.1803278688526], [50.0, 643.1111111111111], [51.0, 915.7142857142858], [52.0, 1908.5], [53.0, 1482.0], [54.0, 1550.6666666666667], [55.0, 2099.0], [56.0, 2227.875], [57.0, 2747.25], [58.0, 899.1111111111111], [59.0, 784.4285714285714], [60.0, 1865.125], [61.0, 6155.75], [62.0, 2191.6666666666665], [63.0, 1030.3333333333335], [64.0, 1958.0], [65.0, 2588.8], [66.0, 5916.0], [67.0, 411.125], [68.0, 2983.0], [69.0, 2993.4], [70.0, 2039.5], [71.0, 5947.0], [72.0, 2767.2], [73.0, 2452.166666666667], [74.0, 4521.333333333334], [75.0, 3101.4], [76.0, 2909.2], [77.0, 3899.8], [78.0, 2721.4], [79.0, 4629.666666666666], [80.0, 2763.666666666667], [81.0, 2742.6666666666665], [82.0, 2056.857142857143], [83.0, 2694.8], [84.0, 1039.857142857143], [85.0, 1956.5], [87.0, 1261.5384615384614], [86.0, 11221.0], [88.0, 1048.6756756756758], [90.0, 1517.8387096774195], [91.0, 1553.7037037037037], [89.0, 1835.225806451613], [92.0, 1702.44], [93.0, 1977.4285714285716], [94.0, 1999.5555555555557], [95.0, 3518.8], [96.0, 1725.3333333333335], [97.0, 1530.4545454545455], [98.0, 2239.857142857143], [99.0, 643.15], [100.0, 1319.7058823529412], [101.0, 2083.5454545454545], [102.0, 1455.7391304347825], [103.0, 1045.6470588235293], [104.0, 865.9199999999998], [105.0, 1423.0], [106.0, 2064.3333333333335], [107.0, 979.6875], [108.0, 1465.6875000000005], [109.0, 2378.6153846153843], [110.0, 1387.7619047619048], [111.0, 1828.681818181818], [112.0, 1376.2749999999999], [113.0, 1923.8846153846152], [114.0, 1134.8181818181818], [115.0, 1212.0192307692307], [116.0, 2223.88], [117.0, 2210.0555555555557], [118.0, 1911.9199999999996], [119.0, 3127.315789473684], [120.0, 2622.842105263158], [121.0, 1384.1666666666663], [122.0, 1500.0], [123.0, 1199.7333333333331], [124.0, 2110.055555555555], [126.0, 2077.6315789473683], [127.0, 1509.1666666666663], [125.0, 1697.6153846153848], [128.0, 2152.0], [129.0, 1988.4999999999998], [130.0, 1041.0416666666667], [131.0, 1300.2941176470586], [132.0, 1434.3125000000005], [133.0, 1646.9666666666667], [134.0, 1477.68], [135.0, 1683.0], [136.0, 1891.2916666666663], [137.0, 1298.1428571428569], [138.0, 1534.1724137931035], [139.0, 1133.030303030303], [140.0, 1030.5238095238096], [141.0, 1626.4814814814813], [142.0, 2207.117647058824], [143.0, 1627.25], [144.0, 1671.111111111111], [145.0, 2346.2083333333335], [146.0, 1520.3548387096773], [148.0, 1699.1142857142854], [149.0, 2100.7096774193546], [150.0, 2182.1176470588234], [151.0, 1703.6538461538462], [147.0, 2508.2], [152.0, 1211.8461538461538], [153.0, 1312.5714285714284], [154.0, 1311.851851851852], [155.0, 2220.695652173913], [156.0, 1683.448275862069], [157.0, 1399.6734693877552], [158.0, 1653.85], [159.0, 2045.4], [160.0, 1830.3478260869563], [161.0, 1189.9295774647883], [163.0, 2380.5937500000005], [164.0, 3235.250000000001], [165.0, 1448.24], [166.0, 1350.1923076923076], [167.0, 1764.3846153846152], [162.0, 1579.9607843137262], [168.0, 1637.1707317073174], [169.0, 1328.6585365853657], [170.0, 1776.1764705882351], [171.0, 1198.2000000000003], [172.0, 1395.5416666666665], [173.0, 1634.5624999999998], [174.0, 1479.875], [175.0, 1969.0400000000004], [176.0, 1683.962962962963], [177.0, 1219.2307692307693], [178.0, 1390.1315789473686], [179.0, 1495.56], [180.0, 1486.0], [181.0, 1490.7333333333336], [182.0, 1495.4166666666663], [183.0, 1776.9444444444443], [184.0, 1176.1], [186.0, 1511.9696969696968], [187.0, 1364.4166666666665], [188.0, 1516.285714285714], [189.0, 1405.892857142857], [190.0, 1733.7878787878785], [191.0, 2045.2352941176475], [185.0, 1750.933333333333], [192.0, 2448.285714285714], [193.0, 1541.3636363636365], [195.0, 1899.6923076923076], [196.0, 1912.3750000000002], [197.0, 1360.0689655172414], [198.0, 1339.761904761905], [199.0, 1719.8387096774193], [194.0, 3046.7777777777783], [200.0, 1524.1702127659576], [201.0, 3210.8333333333335], [202.0, 1564.1666666666667], [203.0, 3256.0], [204.0, 2405.1428571428573], [205.0, 3366.875], [206.0, 2910.6363636363635], [207.0, 2500.714285714286], [208.0, 3107.857142857143], [209.0, 1911.3333333333333], [210.0, 2904.4285714285716], [211.0, 2266.6363636363635], [212.0, 6777.21052631579], [213.0, 3518.5], [214.0, 2453.0], [215.0, 3246.2], [216.0, 3832.764705882353], [217.0, 3367.2], [218.0, 2926.8666666666663], [219.0, 1604.666666666667], [220.0, 923.9285714285714], [221.0, 1140.75], [222.0, 2466.076923076923], [223.0, 4936.6], [224.0, 1308.7692307692307], [225.0, 2745.714285714286], [226.0, 1600.7272727272727], [227.0, 1916.1176470588236], [228.0, 3263.7692307692305], [229.0, 4064.0], [230.0, 3842.714285714286], [231.0, 1255.8333333333333], [232.0, 2712.7777777777774], [233.0, 3645.3333333333335], [234.0, 2886.333333333334], [235.0, 1934.7777777777778], [236.0, 1914.3846153846157], [237.0, 4348.454545454545], [238.0, 2347.2000000000003], [239.0, 2105.9583333333335], [240.0, 2845.0833333333335], [241.0, 2769.285714285714], [242.0, 1910.578947368421], [243.0, 3515.0], [244.0, 1572.6], [245.0, 8318.5], [246.0, 1841.25], [247.0, 1882.2941176470588], [248.0, 2581.0], [249.0, 2704.8823529411766], [250.0, 1171.5], [251.0, 3203.5], [252.0, 2486.157894736842], [253.0, 1798.3846153846155], [254.0, 3437.0], [255.0, 1454.9655172413793], [257.0, 1103.0], [256.0, 1513.95], [258.0, 2857.0833333333326], [259.0, 1800.0769230769233], [260.0, 2314.4117647058824], [261.0, 1689.8181818181818], [262.0, 3964.333333333333], [263.0, 2010.642857142857], [264.0, 2809.47619047619], [270.0, 1996.8947368421052], [271.0, 2470.761904761905], [268.0, 4158.111111111111], [269.0, 2661.3333333333335], [265.0, 4212.7], [266.0, 1214.0357142857142], [267.0, 1987.4736842105267], [272.0, 4929.5], [273.0, 2833.1707317073174], [274.0, 2253.5], [275.0, 2660.0185185185196], [1.0, 14869.0]], "isOverall": false, "label": "HTTP Request", "isController": false}, {"data": [[135.56305625524772, 1666.6387909319878]], "isOverall": false, "label": "HTTP Request-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 275.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 47.916666666666664, "minX": 1.60319334E12, "maxY": 225476.3, "series": [{"data": [[1.6031934E12, 225476.3], [1.60319346E12, 1345.0], [1.60319334E12, 89308.66666666667]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.6031934E12, 7720.333333333333], [1.60319346E12, 47.916666666666664], [1.60319334E12, 3181.6666666666665]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.60319346E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 3600000);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 547.0391566265056, "minX": 1.60319334E12, "maxY": 2338.8, "series": [{"data": [[1.6031934E12, 2097.957611241218], [1.60319346E12, 2338.8], [1.60319334E12, 547.0391566265056]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.60319346E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 3600000);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 546.5114457831323, "minX": 1.60319334E12, "maxY": 2337.56, "series": [{"data": [[1.6031934E12, 1389.9967213114735], [1.60319346E12, 2337.56], [1.60319334E12, 546.5114457831323]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.60319346E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 3600000);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 60.79999999999998, "minX": 1.60319334E12, "maxY": 1496.0571428571432, "series": [{"data": [[1.6031934E12, 1496.0571428571432], [1.60319346E12, 60.79999999999998], [1.60319334E12, 201.26807228915644]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.60319346E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 3600000);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 276.0, "minX": 1.60319334E12, "maxY": 21392.0, "series": [{"data": [[1.6031934E12, 21392.0], [1.60319346E12, 14869.0], [1.60319334E12, 2179.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.6031934E12, 416.5219980788231], [1.60319346E12, 297.0], [1.60319334E12, 284.94899960398675]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.6031934E12, 422.8871003842354], [1.60319346E12, 297.0], [1.60319334E12, 285.0]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.6031934E12, 420.5509990394115], [1.60319346E12, 297.0], [1.60319334E12, 285.0]], "isOverall": false, "label": "95th percentile", "isController": false}, {"data": [[1.6031934E12, 292.0], [1.60319346E12, 297.0], [1.60319334E12, 276.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.6031934E12, 982.5], [1.60319346E12, 541.0], [1.60319334E12, 404.5]], "isOverall": false, "label": "Median", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.60319346E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 3600000);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 294.0, "minX": 1.0, "maxY": 24853.0, "series": [{"data": [[2.0, 906.5], [3.0, 385.0], [4.0, 447.0], [5.0, 419.0], [6.0, 4090.0], [7.0, 687.0], [9.0, 4735.5], [10.0, 359.5], [13.0, 4376.0], [18.0, 6522.0], [23.0, 294.0], [27.0, 1860.5], [31.0, 3815.0], [32.0, 309.5], [34.0, 303.5], [41.0, 1717.0], [45.0, 327.0], [44.0, 3122.0], [46.0, 301.0], [48.0, 4956.5], [51.0, 329.0], [52.0, 357.5], [54.0, 316.0], [57.0, 3213.0], [59.0, 402.0], [58.0, 358.0], [61.0, 1551.5], [67.0, 645.0], [66.0, 826.5], [69.0, 373.0], [68.0, 360.5], [73.0, 502.0], [75.0, 923.0], [74.0, 989.0], [77.0, 389.0], [79.0, 922.5], [76.0, 846.0], [81.0, 1020.0], [83.0, 721.0], [85.0, 404.0], [86.0, 1073.0], [89.0, 416.0], [88.0, 1009.5], [90.0, 928.0], [91.0, 962.5], [93.0, 1352.0], [94.0, 986.5], [92.0, 822.0], [98.0, 1038.0], [97.0, 801.0], [96.0, 1050.0], [102.0, 944.0], [106.0, 978.5], [107.0, 702.0], [104.0, 1005.0], [109.0, 790.0], [110.0, 610.0], [108.0, 782.0], [114.0, 695.0], [116.0, 729.0], [125.0, 1175.0], [1.0, 7579.0]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[41.0, 11341.0], [44.0, 10802.0], [48.0, 11195.0], [57.0, 11056.0], [61.0, 11474.0], [67.0, 11161.0], [74.0, 12311.0], [83.0, 11310.0], [81.0, 11783.0], [86.0, 11640.0], [90.0, 11397.5], [91.0, 10882.0], [94.0, 13149.5], [96.0, 11148.5], [98.0, 11104.0], [6.0, 21517.0], [106.0, 11247.5], [104.0, 23339.0], [109.0, 11391.5], [110.0, 14597.0], [108.0, 18491.0], [114.0, 13670.0], [116.0, 11030.0], [9.0, 24853.0], [10.0, 24541.0], [13.0, 16056.0], [18.0, 11004.5], [27.0, 11490.0], [31.0, 11633.0]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 125.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 0.0, "minX": 1.0, "maxY": 7577.0, "series": [{"data": [[2.0, 905.5], [3.0, 385.0], [4.0, 445.5], [5.0, 417.5], [6.0, 4088.5], [7.0, 686.0], [9.0, 4735.0], [10.0, 358.5], [13.0, 4375.0], [18.0, 6520.0], [23.0, 293.0], [27.0, 1860.0], [31.0, 3593.0], [32.0, 309.0], [34.0, 303.5], [41.0, 1716.0], [45.0, 327.0], [44.0, 3120.0], [46.0, 299.5], [48.0, 4955.5], [51.0, 329.0], [52.0, 356.0], [54.0, 315.0], [57.0, 3212.0], [59.0, 402.0], [58.0, 357.5], [61.0, 1550.5], [67.0, 644.5], [66.0, 826.0], [69.0, 373.0], [68.0, 360.0], [73.0, 502.0], [75.0, 923.0], [74.0, 987.0], [77.0, 389.0], [79.0, 921.5], [76.0, 845.0], [81.0, 1018.0], [83.0, 721.0], [85.0, 404.0], [86.0, 1073.0], [89.0, 416.0], [88.0, 1008.5], [90.0, 927.5], [91.0, 961.5], [93.0, 1352.0], [94.0, 985.5], [92.0, 822.0], [98.0, 1038.0], [97.0, 800.0], [96.0, 1049.0], [102.0, 944.0], [106.0, 978.5], [107.0, 702.0], [104.0, 1005.0], [109.0, 790.0], [110.0, 609.0], [108.0, 782.0], [114.0, 695.0], [116.0, 728.0], [125.0, 1175.0], [1.0, 7577.0]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[41.0, 0.0], [44.0, 0.0], [48.0, 0.0], [57.0, 0.0], [61.0, 0.0], [67.0, 0.0], [74.0, 0.0], [83.0, 0.0], [81.0, 0.0], [86.0, 0.0], [90.0, 0.0], [91.0, 0.0], [94.0, 0.0], [96.0, 0.0], [98.0, 0.0], [6.0, 0.0], [106.0, 0.0], [104.0, 0.0], [109.0, 0.0], [110.0, 0.0], [108.0, 0.0], [114.0, 0.0], [116.0, 0.0], [9.0, 0.0], [10.0, 0.0], [13.0, 0.0], [18.0, 0.0], [27.0, 0.0], [31.0, 0.0]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 125.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 0.3333333333333333, "minX": 1.60319334E12, "maxY": 69.05, "series": [{"data": [[1.6031934E12, 69.05], [1.60319346E12, 0.3333333333333333], [1.60319334E12, 29.866666666666667]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.60319346E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 3600000);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 0.15, "minX": 1.60319334E12, "maxY": 67.13333333333334, "series": [{"data": [[1.6031934E12, 0.15]], "isOverall": false, "label": "Non HTTP response code: javax.net.ssl.SSLException", "isController": false}, {"data": [[1.6031934E12, 67.13333333333334], [1.60319346E12, 0.4166666666666667], [1.60319334E12, 27.666666666666668]], "isOverall": false, "label": "200", "isController": false}, {"data": [[1.6031934E12, 3.8833333333333333]], "isOverall": false, "label": "Non HTTP response code: org.apache.http.NoHttpResponseException", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.60319346E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 3600000);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 0.4166666666666667, "minX": 1.60319334E12, "maxY": 67.13333333333334, "series": [{"data": [[1.6031934E12, 67.13333333333334], [1.60319346E12, 0.4166666666666667], [1.60319334E12, 27.666666666666668]], "isOverall": false, "label": "HTTP Request-success", "isController": false}, {"data": [[1.6031934E12, 4.033333333333333]], "isOverall": false, "label": "HTTP Request-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.60319346E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 3600000);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 0.4166666666666667, "minX": 1.60319334E12, "maxY": 67.13333333333334, "series": [{"data": [[1.6031934E12, 67.13333333333334], [1.60319346E12, 0.4166666666666667], [1.60319334E12, 27.666666666666668]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [[1.6031934E12, 4.033333333333333]], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.60319346E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 3600000);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

